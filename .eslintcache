[{"C:\\study\\react\\my-test-app\\src\\index.js":"1","C:\\study\\react\\my-test-app\\src\\App.js":"2","C:\\study\\react\\my-test-app\\src\\reportWebVitals.js":"3","C:\\study\\react\\my-test-app\\src\\componets\\Header.js":"4","C:\\study\\react\\my-test-app\\src\\componets\\ImageToText\\ImageToText.js":"5"},{"size":500,"mtime":499162500000,"results":"6","hashOfConfig":"7"},{"size":325,"mtime":1607424214936,"results":"8","hashOfConfig":"7"},{"size":362,"mtime":499162500000,"results":"9","hashOfConfig":"7"},{"size":212,"mtime":1607425235669,"results":"10","hashOfConfig":"7"},{"size":3131,"mtime":1607425235682,"results":"11","hashOfConfig":"7"},{"filePath":"12","messages":"13","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"14"},"wwgc29",{"filePath":"15","messages":"16","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"14"},{"filePath":"17","messages":"18","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"14"},{"filePath":"19","messages":"20","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"14"},{"filePath":"21","messages":"22","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"23"},"C:\\study\\react\\my-test-app\\src\\index.js",[],["24","25"],"C:\\study\\react\\my-test-app\\src\\App.js",[],"C:\\study\\react\\my-test-app\\src\\reportWebVitals.js",[],"C:\\study\\react\\my-test-app\\src\\componets\\Header.js",[],"C:\\study\\react\\my-test-app\\src\\componets\\ImageToText\\ImageToText.js",["26"],"import React, { useState } from 'react';\r\nimport './ImageToText.css';\r\n\r\nvar Tesseract = window.Tesseract;\r\n\r\nexport default function ImageToText() {\r\n  const [uploads, setUploads] = useState([]);\r\n  const [patterns, setPatterns] = useState([]);\r\n  const [documents, setDocuments] = useState([])\r\n\r\n\r\n\r\n  const handleChange = (event) => {\r\n    if (event.target.files[0]) {\r\n      var uploads = []\r\n      for (var key in event.target.files) {\r\n        if (!event.target.files.hasOwnProperty(key)) continue;\r\n        let upload = event.target.files[key]\r\n        uploads.push(URL.createObjectURL(upload))\r\n      }\r\n      setUploads(uploads);\r\n    } else {\r\n      setUploads([]);\r\n    }\r\n  }\r\n\r\n  const generateText = () => {\r\n    // let uploads = uploads\r\n    console.log('generateText');\r\n    for(var i = 0; i < uploads.length; i++) {\r\n      Tesseract.recognize(uploads[i], {\r\n        lang: 'eng'\r\n      })\r\n      .catch(err => {\r\n        console.error(err)\r\n      })\r\n      .then(result => {\r\n        console.log(result);\r\n        // Get Confidence score\r\n        let confidence = result.confidence\r\n  \r\n        // Get full output\r\n        let text = result.text\r\n  \r\n        // Get codes\r\n        let pattern = /\\b\\w{10,10}\\b/g\r\n        let patterns = result.text.match(pattern);\r\n        \r\n        // Update state\r\n        setPatterns(currentPatterns => [...currentPatterns, patterns]);\r\n        setDocuments(currentDocuments => [...currentDocuments, {\r\n            pattern: patterns,\r\n            text: text,\r\n            confidence: confidence\r\n          }\r\n        ]);\r\n      })\r\n    }\r\n  }\r\n\r\n    return (\r\n      <div className=\"container\">\r\n        { /* File uploader */ }\r\n        <section className=\"hero\">\r\n          <label className=\"fileUploaderContainer\">\r\n            Click here to upload documents\r\n            <input type=\"file\" id=\"fileUploader\" onChange={(event)=> handleChange(event)} multiple />\r\n          </label>\r\n\r\n          <div>\r\n            { uploads.map((value, index) => {\r\n              return <img alt=\"\" key={index} src={value} width=\"100px\" />\r\n            }) }\r\n          </div>\r\n\r\n          { uploads.length !== 0 &&  <button onClick={()=>generateText()} className=\"button\">Generate</button> }\r\n        </section>\r\n\r\n        { /* Results */ }\r\n        <section className=\"results\">\r\n          { documents.map((value, index) => {\r\n            return (\r\n              <div key={index} className=\"results__result\">\r\n                <div className=\"results__result__image\">\r\n                  <img alt=\"\" src={uploads[index]} width=\"250px\" />\r\n                </div>\r\n                <div className=\"results__result__info\">\r\n                  <div className=\"results__result__info__codes\">\r\n                    <small><strong>Confidence Score:</strong> {value.confidence}</small>\r\n                  </div>\r\n                  <div className=\"results__result__info__text\">\r\n                    <small><strong>Full Output:</strong> {value.text}</small>\r\n                  </div>\r\n                </div>\r\n              </div>\r\n            )\r\n          }) }\r\n        </section>\r\n      </div>\r\n    )\r\n\r\n}\r\n",{"ruleId":"27","replacedBy":"28"},{"ruleId":"29","replacedBy":"30"},{"ruleId":"31","severity":1,"message":"32","line":8,"column":10,"nodeType":"33","messageId":"34","endLine":8,"endColumn":18},"no-native-reassign",["35"],"no-negated-in-lhs",["36"],"no-unused-vars","'patterns' is assigned a value but never used.","Identifier","unusedVar","no-global-assign","no-unsafe-negation"]